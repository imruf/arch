#!/bin/bash

# Install base16 templates and set themes globally.
# Source https://github.com/AuditeMarlow/base16-manager

readonly CONFIG_PATH="$HOME/.base16-manager"

err() {
  echo "ERROR: $*" >&2
}

usage() {
  echo "Usage: base16-manager [option]"
  echo "Options:"
  echo " set              'base16-theme'         Sets the theme"
  echo " set-random                              Sets to a random installed theme"
  echo " install          'username/repository'  Installs a new template"
  echo " uninstall        'username/repository'  Uninstalls a template"
  echo " list                                    Lists installed templates"
  echo " list-support                            Lists supported templates"
  echo " list-installable                        Lists installable templates"
  echo " list-themes                             Lists installed themes"
  echo " update                                  Updates installed templates"
  echo " clean                                   Cleans up leftovers"
}

# print short list of posssible commands (set, set-random, install, ...)
usage_short() {
  base16-manager | sed 1,2d | cut -s -d ' ' -f 2
}

# return true, if directory exists, otherwise false
dir_exists() {
  local dir=$1

  if [[ -d "$dir" ]]; then
    true
  else
    false
  fi
}

# return true, if file exists, otherwise false
file_exists() {
  local file=$1

  if [[ -f "$file" ]]; then
    true
  else
    false
  fi
}

# CREATE directory $1 if it doesn't already exists.
check_dir() {
  local dir=$1

  if ! dir_exists "$dir"; then
    mkdir "$dir"
  fi
}

# if the length of $1 is zero, print base16-manager's help text.
check_arg() {
  local arg=$1

  if [[ -z "$arg" ]]; then
    usage
    exit
  fi
}

# install the repo $1, e.g. $1="USER/NAME"
install() {
  local template=$1
  local repository="https://github.com/$template"

  check_dir "$CONFIG_PATH"

  if ! git ls-remote --exit-code -h "$repository" > /dev/null; then
    err "Template repository not found."
    exit
  fi

  git clone "$repository" "$CONFIG_PATH/$template"
}

# uninstall the repo $1, e.g. $1="USER/NAME"
uninstall() {
  local template=$1

  check_dir "$CONFIG_PATH/$template"

  rm -rf "$CONFIG_PATH:?/$template"

  echo "Uninstalled $template."
}

# print all installed templates
list() {
  # iterate over each MAINTAINER and REPOSITORY stored in $CONFIG_PATH
  for MAINTAINER in "$CONFIG_PATH"/*; do
    for REPOSITORY in "$MAINTAINER"/*; do
      [[ -e "$REPOSITORY" ]] || break # handle empty $CONFIG_PATH
      [[ -d "$REPOSITORY" ]] || break # handle files
      echo "$(basename -- "$MAINTAINER")/$(basename -- "$REPOSITORY")"
    done 
  done 
}

# print all installed themes
list_themes() {
  local sort_option=( "$@" )

  find "$CONFIG_PATH" -type f -name 'base16-*' | \
    sed "s/.*\\/base16-//" | \
    sed "s/\\..*//" | \
    sort "${sort_option[@]}" | uniq
}

# print currently supported templates
list_support() {
  echo "0xdec/base16-rofi"
  echo "chriskempson/base16-shell"
  echo "chriskempson/base16-vim"
  echo "chriskempson/base16-xresources"
  echo "khamer/base16-dunst"
  echo "khamer/base16-termite"
  echo "nicodebo/base16-fzf"
  echo "nicodebo/base16-zathura"
  echo "theova/base16-qutebrowser"
}

# print uninstalled packages which are supported
list_installable() {
  local RESULT=""
  for REPO in $(list_support); do
    if ! grep -q "$REPO" <<< "$(list)"  ; then
      if [[ -z $RESULT ]]; then
        RESULT="$REPO"
      else
        local NEWLINE=$'\n'
        RESULT="$RESULT$NEWLINE$REPO"
      fi
    fi
  done
  echo "$RESULT"
}

# update the themes in all templates
update() {
  local packages
  packages=$(list)

  if [[ -z "$packages" ]]; then
    err "No packages installed."
    exit
  fi

  for package in $packages; do
    cd "$CONFIG_PATH"/"$package" || exit
    git pull -f origin master
  done

  echo "All packages updated."
}

# remove all empty directories in $CONFIG_PATH
clean() {
  find "$CONFIG_PATH" -maxdepth 1 -type d -empty -delete

  check_dir "$CONFIG_PATH"

  echo "Cleaned up $CONFIG_PATH."
}

# set themes for all installed templates
set_theme() {
  local theme=$1
  local packages
  packages=$(list)

  if [[ -z "$packages" ]]; then
    err "No packages installed."
    exit
  fi

  for package in $packages; do
    case "$package" in
      "0xdec/base16-rofi")
        set_by_copy "$package" "$theme" "$HOME/.config/rofi/config" "config"
        ;;
      "chriskempson/base16-shell")
        set_shell "$package" "$theme"
        ;;
      "chriskempson/base16-vim")
        set_vim "$package" "$theme"
        ;;
      "chriskempson/base16-xresources")
        set_xresources "$package" "$theme"
        ;;
      "khamer/base16-dunst")
        set_dunst "$package" "$theme"
        ;;
      "nicodebo/base16-fzf")
        set_fzf "$package" "$theme"
        ;;
      "nicodebo/base16-zathura")
        set_generic "$package" "$theme" "#" ' ' \
          "$HOME/.config/zathura/zathurarc"
        ;;
      "khamer/base16-termite")
        set_generic "$package" "$theme" "#" "=" "$HOME/.config/termite/config"
        killall -USR1 termite  # Reload termite configuration in-place.
        ;;
      "theova/base16-qutebrowser")
        set_generic "$package" "$theme" "#" "=" \
          "$HOME/.config/qutebrowser/config.py"
        ;;
      *)
        err "Package $package is not (yet) supported."
        ;;
    esac
  done

  echo "Set theme to $theme. You may need to restart DE and terminals."
}

# Use template ($1) to set theme ($2).
# This is done by deleting all lines in user's config ($5) containing the 
# left-hand side of any assignement (marked by the assignement string $4) in the
# theme file. All comments directly above the deleted line are also deleted.
set_generic() {
  local package=$1
  local theme=$2
  local cmnt_string=$3
  local assign_string=$4
  local config=$5
  local config_tmp
  local file
  local left
  local line
  local number

  # get template and handling for inexisting templates
  if ls "$CONFIG_PATH/$package"/*/"base16-$theme."* &>/dev/null; then
    file=$(ls "$CONFIG_PATH/$package"/*/"base16-$theme."* ) 
  else
    err "$package: theme $theme not found."
    return 1
  fi

  # work with a temporary config copy
  config_tmp=/tmp/base16_manager_$(basename "$config")
  cp "$config" "$config_tmp"


  while read -r line; do
    # get left side of each assignement
    left=$(echo "$line" | cut -d "$assign_string" -f 1)
    left=$(echo "$left" | xargs) # remove trailing whitespaces
    left=$(echo "$left" | sed 's/\//\\\//g') # escape slashes


    # if $left found, then
    # delete all lines ($line) containing $left
    # delte all comments above $line
    if ! [[ -z $left ]]; then
      lines=$(grep -Fohn "$left" "$config_tmp"  | cut -d : -f 1)

      for number in $lines; do
        sed -i "$number"'s/.*//' "$config_tmp"

        while  (( number > 1 )) && sed "$(( number - 1 ))"'!d' "$config_tmp" | grep -q "^$cmnt_string"; do
          sed -i "$(( number - 1 ))"'s/.*//' "$config_tmp"
          number=$((number - 1))
        done
      done
    fi

  done <"$file"

  #remove special strings (e.g. in template headers)
  sed -i '/'"^$cmnt_string"'.*[b,B]ase16/d' "$config_tmp"
  sed -i '/'"^$cmnt_string"'.*scheme by/d' "$config_tmp"
  sed -i '/'"^$cmnt_string"'.*Author:/d' "$config_tmp"

  # remove parts with more than one empty line
  sed -i '$!N; /^\(.*\)\n\1$/!P; D' "$config_tmp"
  # remove first line, if it's empty
  sed -i '1{/^[[:space:]]*$/d}' "$config_tmp"

  # create a backup
  cp "$config" "$config.bac"

  # append a line break, if last line is not empty.
  if ! [[ -z $(tail -1 "$config_tmp") ]]; then
    printf "\\n" >> "$config_tmp"
  fi

  # append colorscheme
  cat "$file" >> "$config_tmp"

  # copy temporary file to the right place
  cp "$config_tmp" "$config"
}

# Use template ($1) to set theme ($2).
# This is done by copying the theme to the config's ($3) location.
# If the package provides themes with several endings, you have to specify it ($4).
set_by_copy() {
  local package=$1
  local theme=$2
  local config=$3
  local ending=$4
  local file

  # get template and handling for inexisting templates
  if ls "$CONFIG_PATH/$package"/*/"base16-$theme."* &>/dev/null; then
    file=$(ls "$CONFIG_PATH/$package"/*/"base16-$theme."*"$ending" ) 
  else
    err "$package: theme $theme not found."
    return 1
  fi

  # create a backup
  cp "$config" "$config.bac"

  # copy template to the config location.
  cp "$file" "$config"
}

set_dunst() {
  local package=$1
  local theme=$2
  local file="$CONFIG_PATH/$package/themes/base16-$theme.dunstrc"
  local config="$HOME/.config/dunst/dunstrc"

  if ! file_exists "$file"; then
    err "Dunst theme not found."
  else
    sed '/^\[base16_low\]$/,/^\s+foreground(.*)$/d' "$config" > /tmp/dunstrc
    [[ -f "$config.bac" ]] && rm "$config.bac"
    mv "$config" "$config.bac"
    cat /tmp/dunstrc "$file" > "$config"

    # Kill dunst to force reload new configuration.
    [[ ! -z "$(pidof dunst)" ]] && killall dunst
  fi
}

set_fzf() {
  local package=$1
  local theme=$2
  local file=""
  local line="[ -f ~/.fzf.colors ] && source ~/.fzf.colors"
  local configs=".bashrc .zshrc .config/fish/config.fish"

  if command -v fish >/dev/null 2>&1; then
    file="$CONFIG_PATH/$package/fish/base16-$theme.fish"
  else
    file="$CONFIG_PATH/$package/bash/base16-$theme.config"
  fi

  if ! file_exists "$file"; then
    err "FZF theme not found."
  else
    cp "$file" "$HOME/.fzf.colors"

    for config in $configs; do
      if file_exists "$HOME/$config" && ! grep -Fxq "$line" "$HOME/$config"; then
        echo "$line" >> "$HOME/$config"
      fi
    done
  fi
}

set_shell() {
  local package=$1
  local theme=$2
  local file="$CONFIG_PATH/$package/scripts/base16-$theme.sh"
  local helper="$CONFIG_PATH/$package/profile_helper.sh"
  local fish_dir="$HOME/.config/fish"
  local fish_config="$fish_dir/config.fish"
  local fish_string="# Base16 Shell
  if status --is-interactive
    eval sh $file
  end"

  if ! file_exists "$helper"; then
    err "Shell helper not found."
  elif ! file_exists "$file"; then
    err "Shell theme not found."
  else
    eval "$($helper)"
    _base16 "$file"

    if command -v fish >/dev/null 2>&1; then
      # Make fish theme permanent
      [[ ! -d "$fish_dir" ]] && mkdir "$fish_dir"
      [[ ! -f "$fish_config" ]] && touch "$fish_config"

      sed '/^# Base16 Shell$/,/^end$/d' "$fish_config" > /tmp/fish_config
      [[ -f "$fish_config.bac" ]] && rm "$fish_config.bac"
      mv "$fish_config" "$fish_config.bac"
      mv /tmp/fish_config "$fish_config"
      echo "$fish_string" >> "$fish_config"
    fi
  fi
}

set_vim() {
  local package=$1
  local theme=$2
  local file="$CONFIG_PATH/$package/colors/base16-$theme.vim"
  local vim_dirs="$HOME/.vim $HOME/.config/nvim"

  if ! file_exists "$file"; then
    err "Vim theme not found."
  else
    for vim_dir in $vim_dirs; do
      if dir_exists "$vim_dir"; then
        echo "colorscheme base16-$theme" > "$vim_dir/colorscheme.vim"
      fi
    done
  fi
}

# shellcheck disable=SC2120
set_random() {
  set_theme "$(list_themes -R | head -n1 | awk "{print $1;}")"
}

set_xresources() {
  local package=$1
  local theme=$2
  local xres=$HOME/.Xresources
  local file="$CONFIG_PATH/$package/xresources/base16-$theme.Xresources"
  local xres_color=".Xresources.d/colors"

  if ! file_exists "$file"; then
    err "Xresources theme not found."
  else
    cp "$file" "$HOME/$xres_color"

    if file_exists "$xres"; then
      # clean $xres and remove all lines containing color definitions
      sed -i '/^\#ifdef background_opacity/,+4d' "$xres" #ifdef till #endif
        sed -i '/[B|b]ase[[:xdigit:]]/d' "$xres" # base16
      sed -i '/^\! Scheme/d' "$xres" # comments
      sed -i '$!N; /^\(.*\)\n\1$/!P; D' "$xres" #remove newlines
    fi

    # if $xres doesn't exist or doesn't include $xres_color, do it.
    if ! file_exists "$xres" || \
      ! grep -iq "^\\#include\\s\"\\(.*\\)$xres_color\"$" "$xres"
  then
    echo "#include \"$xres_color\"" >> "$xres"
  fi

  xrdb -load "$xres" # reload colors
fi
}

main() {
  check_dir "$CONFIG_PATH"

  local option=$1
  local arg=$2

  if [[ -z "$option" ]]; then
    usage
    exit
  fi

  case $option in
    "install")
      check_arg "$arg"
      install "$arg"
      ;;
    "uninstall")
      check_arg "$arg"
      uninstall "$arg"
      ;;
    "list")
      list
      ;;
    "list-themes")
      list_themes
      ;;
    "list-support")
      list_support
      ;;
    "list-installable")
      list_installable
      ;;
    "update")
      update
      ;;
    "set")
      check_arg "$arg"
      set_theme "$arg"
      ;;
    "clean")
      clean
      ;;
    "set-random")
      # shellcheck disable=SC2119
      set_random
      ;;
    "usage-short")
      usage_short
      ;;
    *)
      usage
      ;;
  esac

  exit
}

main "$@"

# vim: ts=2 sw=2 et
